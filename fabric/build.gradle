// Loom documentation: https://fabricmc.net/wiki/documentation:fabric_loom
// fabric.mod.json documentation: https://fabricmc.net/wiki/documentation:fabric_mod_json

plugins {

    id 'fabric-loom' version '0.12-SNAPSHOT'
    id 'com.github.johnrengelman.shadow' version '7.1.2'

}

configurations {
    shade
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

shadowJar {

    archiveClassifier.set('dev')
    configurations = [project.configurations.shade]
}
tasks.assemble.dependsOn tasks.shadowJar

repositories {

    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
}

dependencies {

    minecraft "com.mojang:minecraft:${project.fabric_minecraft_version}"
    mappings loom.officialMojangMappings()
    
    modApi "net.fabricmc:fabric-loader:${project.fabric_loader_version}"
    modApi 'org.wallentines:midnightlib:1.0-SNAPSHOT'

    include(modImplementation(fabricApi.module('fabric-api-base', "${project.fabric_api_version}")))
    include(modImplementation(fabricApi.module('fabric-networking-api-v1', "${project.fabric_api_version}")))
    include(modImplementation(fabricApi.module('fabric-registry-sync-v0', "${project.fabric_api_version}")))
    include(modImplementation('me.lucko:fabric-permissions-api:0.1-SNAPSHOT'))

    implementation project(':api')
    implementation project(':common')

    shade project(':api')
    shade project(':common')

    shade 'org.wallentines:midnightlib:1.0-SNAPSHOT'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.9.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.0'
}

loom {
    runs {
        client {
            runDir = "run/client"
            ideConfigGenerated = true
            client()
        }
        server {
            runDir = "run/server"
            ideConfigGenerated = true
            server()
        }
    }
    interfaceInjection {
		enableDependencyInterfaceInjection = true
	}
    accessWidenerPath = file("src/main/resources/" + project.mod_id + ".accesswidener")
}

processResources {

    Map<String, ?> ex = new HashMap<>()
    ex.put("version", project.version)
    ex.put("id", project.mod_id)
    ex.put("name", project.mod_name)
    ex.put("target", project.name)
    ex.put("description", project.description)
    ex.put("group", project.group)
    ex.put("minecraftVersion", project.fabric_minecraft_version)
    ex.put("fabricLoader", project.fabric_loader_version)
    ex.put("mainClass", project.main_class_name)

    filesMatching("fabric.mod.json") {
        expand(ex)
    }
}

test {
    useJUnitPlatform()
}

remapJar {
    dependsOn(shadowJar)
    inputFile.set(shadowJar.archiveFile)
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            groupId = "${project.group}.${project.mod_id}"
        }
    }
    repositories {
        maven {
            if (project.hasProperty("pubUrl")) {
                url = project.pubUrl as String
                credentials {
                    username project.pubUser as String
                    password project.pubPass as String
                }
            }
        }
    }
}
